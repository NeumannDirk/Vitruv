grammar tools.vitruv.dsls.commonalities.CommonalitiesLanguage
	with org.eclipse.xtext.xbase.Xbase
	hidden(WS, ML_COMMENT, SL_COMMENT)

generate language "http://vitruv.tools/dsls/commonalities/language"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://vitruv.tools/dsls/common/elements" as common
import "http://vitruv.tools/dsls/commonalities/elements"
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

CommonalityFile:
	(operatorImports+=OperatorImport)*
	(metamodelImports+=MetamodelImport)*
	concept=Concept
	commonality=Commonality
;

OperatorImport:
	'import' (importedNamespace=QualifiedOperatorName | importedNamespace=QualifiedOperatorWildCard)
;

MetamodelImport returns common::MetamodelImport:
	'import' package=[ecore::EPackage|STRING] 'as' name=ValidID (useQualifiedNames?='using' 'qualified' 'names')?
;
	
Domain:
	Concept
;

Concept:
	'concept' name=ValidID
;

Metaclass:
	Commonality
;

Commonality:
	(referenced?='referenced')? 'commonality' name=ValidID '{'
		participations+=Participation*
		(attributes+=CommonalityAttribute|references+=CommonalityReference)*
	'}'
;



/******************
 * Participations *
 ******************/

PackageLike:
	Participation
;

Participation:
	'with' (domainName=DomainName | '(' domainName=DomainName ('as' domainAlias=ValidID)? ')')
	':' (parts += SimpleParticipationClass | '(' parts += ParticipationPart (',' parts+=ParticipationPart)* ')')
	('whereat' '{'
		(conditions+=ParticipationCondition (',' conditions+=ParticipationCondition)*)?
	'}')?
;

ClassLike:
	ParticipationClass
;

ParticipationClass: // never used as a parser rule, only establishes the inheritance hierarchy
	->SimpleParticipationClass | FullParticipationClass
;

SimpleParticipationClass returns ParticipationClass:
	superMetaclass=[Metaclass|UnqualifiedClass]
;

FullParticipationClass returns ParticipationClass: 
	{ParticipationClass} (singleton?='single')? superMetaclass=[Metaclass|UnqualifiedClass] ('as' classAlias=ValidID)?
;

ParticipationPart:
	FullParticipationClass | '(' FullParticipationClass ')' | ParticipationRelation
;

ParticipationRelation:
	(leftParts += SimpleParticipationClass | '(' leftParts += ParticipationPart (',' leftParts+=ParticipationPart)* ')')
	operator=[jvmTypes::JvmDeclaredType|OperatorName]
	(rightParts += SimpleParticipationClass | '(' rightParts += ParticipationPart (',' rightParts+=ParticipationPart)* ')')
;

ParticipationCondition:
	({BidirectionalParticipationCondition} | '->' {EnforcedParticipationCondition} | '<-' {CheckedParticipationCondition})
	leftOperand=ParticipationConditionLeftOperand 
	operator=[jvmTypes::JvmDeclaredType|OperatorName]
	((rightOperands+=ParticipationConditionRightOperand) | ('(' (rightOperands+=ParticipationConditionRightOperand (',' rightOperands+=ParticipationConditionRightOperand)*)? ')'))?
;

ParticipationConditionLeftOperand returns ParticipationConditionOperand:
	UnqualifiedParticipationClassOperand | UnqualifiedParticipationAttributeOperand
;

ParticipationConditionRightOperand returns ParticipationConditionOperand:
	UnqualifiedParticipationClassOperand | UnqualifiedParticipationAttributeOperand | LiteralOperand
;

ParticipationConditionOperand:
	UnqualifiedParticipationClassOperand | UnqualifiedParticipationAttributeOperand | LiteralOperand
;

/**************
 * Attributes *
 **************/

Attribute:
	CommonalityAttribute | ParticipationAttribute | CommonalityReference
;

CommonalityAttribute:
	'has' name=ValidID '{'
		mappings+=CommonalityAttributeMapping*
	'}'
;

CommonalityAttributeMapping:
	SimpleAttributeMapping | OperatorAttributeMapping
;

SimpleAttributeMapping:
	(readAndWrite?='=' | write?='->' | read?='<-')
	attribute=QualifiedParticipationAttribute
;

OperatorAttributeMapping:
	(readAndWrite?='=' | write?='->' | read?='<-')
	operator=[jvmTypes::JvmDeclaredType|OperatorName]
	'(' (operands+=AttributeMappingOperand (',' operands+=AttributeMappingOperand)*)? ')'
;

AttributeMappingOperand:
	LocalUnqualifiedCommonalityAttributeOperand | QualifiedParticipationAttributeOperand | QualifiedParticipationClassOperand | LiteralOperand
;

ParticipationAttribute:
	QualifiedParticipationAttribute | UnqualifiedParticipationAttribute
;

QualifiedParticipationAttribute returns ParticipationAttribute:
	participationClass=[ParticipationClass|QualifiedClass] '.' attribute=[Attribute|UnqualifiedAttribute]
;

UnqualifiedParticipationAttribute returns ParticipationAttribute:
	participationClass=[ParticipationClass|UnqualifiedClass] '.' attribute=[Attribute|UnqualifiedAttribute]
;

CommonalityAttributeReference:
	LocalUnqualifiedCommonalityAttributeReference
;

// Local: Can only refer to the (single) local commonality.
LocalUnqualifiedCommonalityAttributeReference returns CommonalityAttributeReference:
	commonality=[Commonality|UnqualifiedClass] '.' attribute=[CommonalityAttribute|UnqualifiedAttribute]
;

/**************
 * References *
 **************/

CommonalityReference:
	'has' name=ValidID 'referencing' referenceType=[Commonality|QualifiedClass] '{'
		mappings+=CommonalityReferenceMapping*
	'}'
;

CommonalityReferenceMapping:
	SimpleReferenceMapping | OperatorReferenceMapping
;

SimpleReferenceMapping:
	(readAndWrite?='=' | write?='->' | read?='<-')
	reference=QualifiedParticipationAttribute
	// TODO not used right now
	('via' referenceTargets+=[ParticipationClass|QualifiedClass] (',' referenceTargets+=[ParticipationClass|QualifiedClass])*)?
;

OperatorReferenceMapping:
	(readAndWrite?='=' | write?='->' | read?='<-')
	participationClass=[ParticipationClass|QualifiedClass] '.' operator=[jvmTypes::JvmDeclaredType|OperatorName]
	'(' (operands+=ReferenceMappingOperand (',' operands+=ReferenceMappingOperand)*)? ')'
;

ReferenceMappingOperand:
	ReferencedParticipationAttributeOperand | UnqualifiedParticipationAttributeOperand | LiteralOperand
;

ReferencedParticipationAttributeOperand:
	'ref' participationAttribute=UnqualifiedParticipationAttribute
;

/************
 * Operands *
 ************/

Operand:
	ParticipationConditionOperand | AttributeMappingOperand | ReferenceMappingOperand
;

LiteralOperand:
	expression=(XBooleanLiteral |
		XNumberLiteral |
		XNullLiteral |
		XStringLiteral)
	// TODO List literal
;

QualifiedParticipationClassOperand returns ParticipationClassOperand:
	participationClass=[ParticipationClass|QualifiedClass]
;

UnqualifiedParticipationClassOperand returns ParticipationClassOperand:
	participationClass=[ParticipationClass|UnqualifiedClass]
;

QualifiedParticipationAttributeOperand returns ParticipationAttributeOperand:
	participationAttribute=QualifiedParticipationAttribute
;

UnqualifiedParticipationAttributeOperand returns ParticipationAttributeOperand:
	participationAttribute=UnqualifiedParticipationAttribute
;

LocalUnqualifiedCommonalityAttributeOperand returns CommonalityAttributeOperand:
	attributeReference=LocalUnqualifiedCommonalityAttributeReference
;

/******************
 * Datatype Rules *
 ******************/

DomainName:
	ValidID
;

UnqualifiedClass:
	ValidID
;

QualifiedClass:
	DomainName ':' UnqualifiedClass
;

UnqualifiedAttribute:
	ValidID
;

// To correctly parse character combinations, we need to copy all tokens that
// already occurred in the parent grammars (i.e. Xbase).
// Must be in sync with CommonalitiesOperatorConventions.TYPE_NAME_TO_LANGUAGE_IDENTIFIER!
// Excluded are:
//   * '->' and '<-': Ambiguous since the next participation condition may start with this as well
//   * '_' because it is used for a wildcard import
OperatorName:
	ID |
	( '+=' | '-=' | '*=' | '/=' | '%=' | '>=' | '<=' | '||' | '&&' | '==' | '!=' | '===' | '!=='
	| '=>' | '<>' | '?:' | '**' | '--' | '++' | '::'
	| '=' | '!' | '%' | '&' | '*' | '+' | '-' | '/' | '<' | '>' | '^' | '~' | ':' | '?')+
;

QualifiedOperatorName:
	ValidID ('.' ValidID)* '.' OperatorName
;

QualifiedOperatorWildCard: 
	ValidID ('.' ValidID)* '.' '_'
;


/******************
 * Terminal Rules *
 ******************/

