import edu.kit.ipd.sdq.metamodels.insurance.Gender
import edu.kit.ipd.sdq.metamodels.persons.Male

import "edu.kit.ipd.sdq.metamodels.persons" as persons
import "edu.kit.ipd.sdq.metamodels.insurance" as insurance

reactions: personsToInsurance
in reaction to changes in Persons
execute actions in Insurance

reaction CreatedPersonRegister {
	after element persons::PersonRegister created and inserted as root
	call createInsuranceDatabase(newValue)
}

routine createInsuranceDatabase(persons::PersonRegister personRegister) {
	action {
		val insuranceDatabase = create insurance::InsuranceDatabase and initialize {
			persistProjectRelative(personRegister, insuranceDatabase, "model/insurance.insurance")
		}
		add correspondence between insuranceDatabase and personRegister
	}
}

reaction DeletedPersonRegister{
	after element persons::PersonRegister deleted
	call deleteInsuranceDatabase(affectedEObject)
}

routine deleteInsuranceDatabase(persons::PersonRegister personsRegister){
	match{
		val insuranceDatabase = retrieve insurance::InsuranceDatabase corresponding to personsRegister
	}
	
	action{
		delete insuranceDatabase
	}
}

reaction CreatedPerson {
	after element persons::Person created and inserted in persons::PersonRegister[persons]
	call createInsuranceClient(newValue)
}

routine createInsuranceClient(persons::Person person) {
	match{
		val insuranceDatabase = retrieve insurance::InsuranceDatabase corresponding to person.eContainer
	}
	action{
		val newClient = create insurance::InsuranceClient and initialize {
			newClient.name = person.fullName
			//newClient.socialSecurityNumber = 000
			if (person instanceof Male) {
				newClient.gender = Gender.MALE
			} else {
				newClient.gender = Gender.FEMALE
			}
		}
		call insuranceDatabase.insuranceclient += newClient
		add correspondence between person and newClient
		
	}
}

reaction ChangedFullName {
	after attribute replaced at persons::Person[fullName]
	call changeNames(affectedEObject)
}

routine changeNames(persons::Person person) {
	match {
		val client = retrieve insurance::InsuranceClient corresponding to person
	}
	action {
		call {
			client.name = person.fullName
		}
	}
}

reaction DeletedPerson {
	after element persons::Person deleted
	call deleteClient(affectedEObject)
}

routine deleteClient(persons::Person person) {
	match {
		val client = retrieve insurance::InsuranceClient corresponding to person
	}
	action {
		remove correspondence between person and client
		delete client
	}
}

